// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: problem.proto

package problem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProblemService_GetProblemById_FullMethodName                = "/problem.ProblemService/GetProblemById"
	ProblemService_GetProblemTitleByIds_FullMethodName          = "/problem.ProblemService/GetProblemTitleByIds"
	ProblemService_GetRecentProblems_FullMethodName             = "/problem.ProblemService/GetRecentProblems"
	ProblemService_GetProblemsByPage_FullMethodName             = "/problem.ProblemService/GetProblemsByPage"
	ProblemService_CreateProblem_FullMethodName                 = "/problem.ProblemService/CreateProblem"
	ProblemService_UpdateProblem_FullMethodName                 = "/problem.ProblemService/UpdateProblem"
	ProblemService_DeleteProblem_FullMethodName                 = "/problem.ProblemService/DeleteProblem"
	ProblemService_CreateSubmit_FullMethodName                  = "/problem.ProblemService/CreateSubmit"
	ProblemService_GetSubmitById_FullMethodName                 = "/problem.ProblemService/GetSubmitById"
	ProblemService_GetSubmitByUserIdAndProblemId_FullMethodName = "/problem.ProblemService/GetSubmitByUserIdAndProblemId"
	ProblemService_UpdateSubmit_FullMethodName                  = "/problem.ProblemService/UpdateSubmit"
)

// ProblemServiceClient is the client API for ProblemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProblemServiceClient interface {
	GetProblemById(ctx context.Context, in *GetProblemByIdRequest, opts ...grpc.CallOption) (*GetProblemByIdResponse, error)
	GetProblemTitleByIds(ctx context.Context, in *GetProblemTitleByIdsRequest, opts ...grpc.CallOption) (*GetProblemTitleByIdsResponse, error)
	GetRecentProblems(ctx context.Context, in *GetRecentProblemsRequest, opts ...grpc.CallOption) (*GetRecentProblemsResponse, error)
	GetProblemsByPage(ctx context.Context, in *GetProblemsByPageRequest, opts ...grpc.CallOption) (*GetProblemsByPageResponse, error)
	CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error)
	UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error)
	DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error)
	CreateSubmit(ctx context.Context, in *CreateSubmitRequest, opts ...grpc.CallOption) (*CreateSubmitResponse, error)
	GetSubmitById(ctx context.Context, in *GetSubmitByIdRequest, opts ...grpc.CallOption) (*GetSubmitByIdResponse, error)
	GetSubmitByUserIdAndProblemId(ctx context.Context, in *GetSubmitByUserIdAndProblemIdRequest, opts ...grpc.CallOption) (*GetSubmitByUserIdAndProblemIdResponse, error)
	UpdateSubmit(ctx context.Context, in *UpdateSubmitRequest, opts ...grpc.CallOption) (*UpdateSubmitResponse, error)
}

type problemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProblemServiceClient(cc grpc.ClientConnInterface) ProblemServiceClient {
	return &problemServiceClient{cc}
}

func (c *problemServiceClient) GetProblemById(ctx context.Context, in *GetProblemByIdRequest, opts ...grpc.CallOption) (*GetProblemByIdResponse, error) {
	out := new(GetProblemByIdResponse)
	err := c.cc.Invoke(ctx, ProblemService_GetProblemById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemTitleByIds(ctx context.Context, in *GetProblemTitleByIdsRequest, opts ...grpc.CallOption) (*GetProblemTitleByIdsResponse, error) {
	out := new(GetProblemTitleByIdsResponse)
	err := c.cc.Invoke(ctx, ProblemService_GetProblemTitleByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetRecentProblems(ctx context.Context, in *GetRecentProblemsRequest, opts ...grpc.CallOption) (*GetRecentProblemsResponse, error) {
	out := new(GetRecentProblemsResponse)
	err := c.cc.Invoke(ctx, ProblemService_GetRecentProblems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetProblemsByPage(ctx context.Context, in *GetProblemsByPageRequest, opts ...grpc.CallOption) (*GetProblemsByPageResponse, error) {
	out := new(GetProblemsByPageResponse)
	err := c.cc.Invoke(ctx, ProblemService_GetProblemsByPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateProblem(ctx context.Context, in *CreateProblemRequest, opts ...grpc.CallOption) (*CreateProblemResponse, error) {
	out := new(CreateProblemResponse)
	err := c.cc.Invoke(ctx, ProblemService_CreateProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateProblem(ctx context.Context, in *UpdateProblemRequest, opts ...grpc.CallOption) (*UpdateProblemResponse, error) {
	out := new(UpdateProblemResponse)
	err := c.cc.Invoke(ctx, ProblemService_UpdateProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) DeleteProblem(ctx context.Context, in *DeleteProblemRequest, opts ...grpc.CallOption) (*DeleteProblemResponse, error) {
	out := new(DeleteProblemResponse)
	err := c.cc.Invoke(ctx, ProblemService_DeleteProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) CreateSubmit(ctx context.Context, in *CreateSubmitRequest, opts ...grpc.CallOption) (*CreateSubmitResponse, error) {
	out := new(CreateSubmitResponse)
	err := c.cc.Invoke(ctx, ProblemService_CreateSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetSubmitById(ctx context.Context, in *GetSubmitByIdRequest, opts ...grpc.CallOption) (*GetSubmitByIdResponse, error) {
	out := new(GetSubmitByIdResponse)
	err := c.cc.Invoke(ctx, ProblemService_GetSubmitById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) GetSubmitByUserIdAndProblemId(ctx context.Context, in *GetSubmitByUserIdAndProblemIdRequest, opts ...grpc.CallOption) (*GetSubmitByUserIdAndProblemIdResponse, error) {
	out := new(GetSubmitByUserIdAndProblemIdResponse)
	err := c.cc.Invoke(ctx, ProblemService_GetSubmitByUserIdAndProblemId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *problemServiceClient) UpdateSubmit(ctx context.Context, in *UpdateSubmitRequest, opts ...grpc.CallOption) (*UpdateSubmitResponse, error) {
	out := new(UpdateSubmitResponse)
	err := c.cc.Invoke(ctx, ProblemService_UpdateSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProblemServiceServer is the server API for ProblemService service.
// All implementations must embed UnimplementedProblemServiceServer
// for forward compatibility
type ProblemServiceServer interface {
	GetProblemById(context.Context, *GetProblemByIdRequest) (*GetProblemByIdResponse, error)
	GetProblemTitleByIds(context.Context, *GetProblemTitleByIdsRequest) (*GetProblemTitleByIdsResponse, error)
	GetRecentProblems(context.Context, *GetRecentProblemsRequest) (*GetRecentProblemsResponse, error)
	GetProblemsByPage(context.Context, *GetProblemsByPageRequest) (*GetProblemsByPageResponse, error)
	CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error)
	UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error)
	DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error)
	CreateSubmit(context.Context, *CreateSubmitRequest) (*CreateSubmitResponse, error)
	GetSubmitById(context.Context, *GetSubmitByIdRequest) (*GetSubmitByIdResponse, error)
	GetSubmitByUserIdAndProblemId(context.Context, *GetSubmitByUserIdAndProblemIdRequest) (*GetSubmitByUserIdAndProblemIdResponse, error)
	UpdateSubmit(context.Context, *UpdateSubmitRequest) (*UpdateSubmitResponse, error)
	mustEmbedUnimplementedProblemServiceServer()
}

// UnimplementedProblemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProblemServiceServer struct {
}

func (UnimplementedProblemServiceServer) GetProblemById(context.Context, *GetProblemByIdRequest) (*GetProblemByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemById not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemTitleByIds(context.Context, *GetProblemTitleByIdsRequest) (*GetProblemTitleByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemTitleByIds not implemented")
}
func (UnimplementedProblemServiceServer) GetRecentProblems(context.Context, *GetRecentProblemsRequest) (*GetRecentProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentProblems not implemented")
}
func (UnimplementedProblemServiceServer) GetProblemsByPage(context.Context, *GetProblemsByPageRequest) (*GetProblemsByPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblemsByPage not implemented")
}
func (UnimplementedProblemServiceServer) CreateProblem(context.Context, *CreateProblemRequest) (*CreateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProblem not implemented")
}
func (UnimplementedProblemServiceServer) UpdateProblem(context.Context, *UpdateProblemRequest) (*UpdateProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProblem not implemented")
}
func (UnimplementedProblemServiceServer) DeleteProblem(context.Context, *DeleteProblemRequest) (*DeleteProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProblem not implemented")
}
func (UnimplementedProblemServiceServer) CreateSubmit(context.Context, *CreateSubmitRequest) (*CreateSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmit not implemented")
}
func (UnimplementedProblemServiceServer) GetSubmitById(context.Context, *GetSubmitByIdRequest) (*GetSubmitByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmitById not implemented")
}
func (UnimplementedProblemServiceServer) GetSubmitByUserIdAndProblemId(context.Context, *GetSubmitByUserIdAndProblemIdRequest) (*GetSubmitByUserIdAndProblemIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmitByUserIdAndProblemId not implemented")
}
func (UnimplementedProblemServiceServer) UpdateSubmit(context.Context, *UpdateSubmitRequest) (*UpdateSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmit not implemented")
}
func (UnimplementedProblemServiceServer) mustEmbedUnimplementedProblemServiceServer() {}

// UnsafeProblemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProblemServiceServer will
// result in compilation errors.
type UnsafeProblemServiceServer interface {
	mustEmbedUnimplementedProblemServiceServer()
}

func RegisterProblemServiceServer(s grpc.ServiceRegistrar, srv ProblemServiceServer) {
	s.RegisterService(&ProblemService_ServiceDesc, srv)
}

func _ProblemService_GetProblemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_GetProblemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemById(ctx, req.(*GetProblemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemTitleByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemTitleByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemTitleByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_GetProblemTitleByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemTitleByIds(ctx, req.(*GetProblemTitleByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetRecentProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetRecentProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_GetRecentProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetRecentProblems(ctx, req.(*GetRecentProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetProblemsByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemsByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetProblemsByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_GetProblemsByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetProblemsByPage(ctx, req.(*GetProblemsByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_CreateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateProblem(ctx, req.(*CreateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_UpdateProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateProblem(ctx, req.(*UpdateProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_DeleteProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).DeleteProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_DeleteProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).DeleteProblem(ctx, req.(*DeleteProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_CreateSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).CreateSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_CreateSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).CreateSubmit(ctx, req.(*CreateSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetSubmitById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmitByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetSubmitById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_GetSubmitById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetSubmitById(ctx, req.(*GetSubmitByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_GetSubmitByUserIdAndProblemId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmitByUserIdAndProblemIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).GetSubmitByUserIdAndProblemId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_GetSubmitByUserIdAndProblemId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).GetSubmitByUserIdAndProblemId(ctx, req.(*GetSubmitByUserIdAndProblemIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProblemService_UpdateSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProblemServiceServer).UpdateSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProblemService_UpdateSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProblemServiceServer).UpdateSubmit(ctx, req.(*UpdateSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProblemService_ServiceDesc is the grpc.ServiceDesc for ProblemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProblemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "problem.ProblemService",
	HandlerType: (*ProblemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProblemById",
			Handler:    _ProblemService_GetProblemById_Handler,
		},
		{
			MethodName: "GetProblemTitleByIds",
			Handler:    _ProblemService_GetProblemTitleByIds_Handler,
		},
		{
			MethodName: "GetRecentProblems",
			Handler:    _ProblemService_GetRecentProblems_Handler,
		},
		{
			MethodName: "GetProblemsByPage",
			Handler:    _ProblemService_GetProblemsByPage_Handler,
		},
		{
			MethodName: "CreateProblem",
			Handler:    _ProblemService_CreateProblem_Handler,
		},
		{
			MethodName: "UpdateProblem",
			Handler:    _ProblemService_UpdateProblem_Handler,
		},
		{
			MethodName: "DeleteProblem",
			Handler:    _ProblemService_DeleteProblem_Handler,
		},
		{
			MethodName: "CreateSubmit",
			Handler:    _ProblemService_CreateSubmit_Handler,
		},
		{
			MethodName: "GetSubmitById",
			Handler:    _ProblemService_GetSubmitById_Handler,
		},
		{
			MethodName: "GetSubmitByUserIdAndProblemId",
			Handler:    _ProblemService_GetSubmitByUserIdAndProblemId_Handler,
		},
		{
			MethodName: "UpdateSubmit",
			Handler:    _ProblemService_UpdateSubmit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "problem.proto",
}
