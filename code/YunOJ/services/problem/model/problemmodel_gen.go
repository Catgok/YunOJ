// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	problemFieldNames          = builder.RawFieldNames(&Problem{})
	problemRows                = strings.Join(problemFieldNames, ",")
	problemRowsExpectAutoSet   = strings.Join(stringx.Remove(problemFieldNames, "`problem_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	problemRowsWithPlaceHolder = strings.Join(stringx.Remove(problemFieldNames, "`problem_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheProblemProblemIdPrefix = "cache:problem:problemId:"
	cacheProblemTitlePrefix     = "cache:problem:title:"
	cacheProblemPagePrefix      = "cache:problem:page:"
)

type (
	problemModel interface {
		Insert(ctx context.Context, data *Problem) (sql.Result, error)
		FindOne(ctx context.Context, problemId int64) (*Problem, error)
		FindOneByTitle(ctx context.Context, title string) (*Problem, error)
		Update(ctx context.Context, data *Problem) error
		Delete(ctx context.Context, problemId int64) error
		FindByPage(ctx context.Context, offset, limit int64) ([]Problem, error)
	}

	defaultProblemModel struct {
		sqlc.CachedConn
		table string
	}

	Problem struct {
		ProblemId   int64     `db:"problem_id"`   // 题目id
		Title       string    `db:"title"`        // 题目名称
		TimeLimit   int64     `db:"time_limit"`   // 时间限制 单位ms
		MemoryLimit int64     `db:"memory_limit"` // 空间限制 单位MB
		Description string    `db:"description"`  // 题目描述
		HardLevel   int64     `db:"hard_level"`   // 难度等级 0-简单,1-中等,2-困难
		IsDelete    int64     `db:"is_delete"`    // 是否删除 0-否,1-是
		SubmitCount int64     `db:"submit_count"` // 提交次数
		PassCount   int64     `db:"pass_count"`   // 通过次数
		Solution    string    `db:"solution"`     // 题目解析
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
	}
)

func newProblemModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProblemModel {
	return &defaultProblemModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`problem`",
	}
}

func (m *defaultProblemModel) Delete(ctx context.Context, problemId int64) error {
	data, err := m.FindOne(ctx, problemId)
	if err != nil {
		return err
	}

	problemProblemIdKey := fmt.Sprintf("%s%v", cacheProblemProblemIdPrefix, problemId)
	problemTitleKey := fmt.Sprintf("%s%v", cacheProblemTitlePrefix, data.Title)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `problem_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, problemId)
	}, problemProblemIdKey, problemTitleKey)
	return err
}

func (m *defaultProblemModel) FindOne(ctx context.Context, problemId int64) (*Problem, error) {
	problemProblemIdKey := fmt.Sprintf("%s%v", cacheProblemProblemIdPrefix, problemId)
	var resp Problem
	err := m.QueryRowCtx(ctx, &resp, problemProblemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `problem_id` = ? limit 1", problemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, problemId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) FindOneByTitle(ctx context.Context, title string) (*Problem, error) {
	problemTitleKey := fmt.Sprintf("%s%v", cacheProblemTitlePrefix, title)
	var resp Problem
	err := m.QueryRowIndexCtx(ctx, &resp, problemTitleKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `title` = ? limit 1", problemRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, title); err != nil {
			return nil, err
		}
		return resp.ProblemId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) Insert(ctx context.Context, data *Problem) (sql.Result, error) {
	problemProblemIdKey := fmt.Sprintf("%s%v", cacheProblemProblemIdPrefix, data.ProblemId)
	problemTitleKey := fmt.Sprintf("%s%v", cacheProblemTitlePrefix, data.Title)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, problemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.TimeLimit, data.MemoryLimit, data.Description, data.HardLevel, data.IsDelete, data.SubmitCount, data.PassCount, data.Solution)
	}, problemProblemIdKey, problemTitleKey)
	return ret, err
}

func (m *defaultProblemModel) Update(ctx context.Context, newData *Problem) error {
	data, err := m.FindOne(ctx, newData.ProblemId)
	if err != nil {
		return err
	}

	problemProblemIdKey := fmt.Sprintf("%s%v", cacheProblemProblemIdPrefix, data.ProblemId)
	problemTitleKey := fmt.Sprintf("%s%v", cacheProblemTitlePrefix, data.Title)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `problem_id` = ?", m.table, problemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Title, newData.TimeLimit, newData.MemoryLimit, newData.Description, newData.HardLevel, newData.IsDelete, newData.SubmitCount, newData.PassCount, newData.Solution, newData.ProblemId)
	}, problemProblemIdKey, problemTitleKey)
	return err
}

func (m *defaultProblemModel) FindByPage(ctx context.Context, offset, limit int64) ([]Problem, error) { // todo check sql and resp
	problemPageKey := fmt.Sprintf("%s%v%v", cacheProblemPagePrefix, offset, limit)
	var resp []Problem
	err := m.QueryRowCtx(ctx, &resp, problemPageKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `is_delete` = 0 order by `problem_id` LIMIT ? OFFSET ?", problemRows, m.table)
		return conn.QueryRowsCtx(ctx, v, query, limit, offset)
	})
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheProblemProblemIdPrefix, primary)
}

func (m *defaultProblemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `problem_id` = ? limit 1", problemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProblemModel) tableName() string {
	return m.table
}
