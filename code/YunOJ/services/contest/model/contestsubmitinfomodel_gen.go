// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contestSubmitInfoFieldNames          = builder.RawFieldNames(&ContestSubmitInfo{})
	contestSubmitInfoRows                = strings.Join(contestSubmitInfoFieldNames, ",")
	contestSubmitInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(contestSubmitInfoFieldNames, "`contest_submit_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	contestSubmitInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(contestSubmitInfoFieldNames, "`contest_submit_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheContestSubmitInfoContestSubmitIdPrefix   = "cache:contestSubmitInfo:contestSubmitId:"
	cacheContestSubmitInfoContestIdSubmitIdPrefix = "cache:contestSubmitInfo:contestId:submitId:"
	cacheContestSubmitInfoSubmitIdPrefix          = "cache:contestSubmitInfo:submitId:"
)

type (
	contestSubmitInfoModel interface {
		Insert(ctx context.Context, data *ContestSubmitInfo) (sql.Result, error)
		FindOne(ctx context.Context, contestSubmitId int64) (*ContestSubmitInfo, error)
		FindOneByContestIdSubmitId(ctx context.Context, contestId int64, submitId int64) (*ContestSubmitInfo, error)
		FindOneBySubmitId(ctx context.Context, submitId int64) (*ContestSubmitInfo, error)
		Update(ctx context.Context, data *ContestSubmitInfo) error
		Delete(ctx context.Context, contestSubmitId int64) error
	}

	defaultContestSubmitInfoModel struct {
		sqlc.CachedConn
		table string
	}

	ContestSubmitInfo struct {
		ContestSubmitId int64     `db:"contest_submit_id"` // 竞赛提交信息ID
		ContestId       int64     `db:"contest_id"`        // 竞赛ID
		SubmitId        int64     `db:"submit_id"`         // 提交ID
		CreatedAt       time.Time `db:"created_at"`        // 记录创建时间
		UpdatedAt       time.Time `db:"updated_at"`        // 记录更新时间
	}
)

func newContestSubmitInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultContestSubmitInfoModel {
	return &defaultContestSubmitInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`contest_submit_info`",
	}
}

func (m *defaultContestSubmitInfoModel) Delete(ctx context.Context, contestSubmitId int64) error {
	data, err := m.FindOne(ctx, contestSubmitId)
	if err != nil {
		return err
	}

	contestSubmitInfoContestIdSubmitIdKey := fmt.Sprintf("%s%v:%v", cacheContestSubmitInfoContestIdSubmitIdPrefix, data.ContestId, data.SubmitId)
	contestSubmitInfoContestSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoContestSubmitIdPrefix, contestSubmitId)
	contestSubmitInfoSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoSubmitIdPrefix, data.SubmitId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `contest_submit_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, contestSubmitId)
	}, contestSubmitInfoContestIdSubmitIdKey, contestSubmitInfoContestSubmitIdKey, contestSubmitInfoSubmitIdKey)
	return err
}

func (m *defaultContestSubmitInfoModel) FindOne(ctx context.Context, contestSubmitId int64) (*ContestSubmitInfo, error) {
	contestSubmitInfoContestSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoContestSubmitIdPrefix, contestSubmitId)
	var resp ContestSubmitInfo
	err := m.QueryRowCtx(ctx, &resp, contestSubmitInfoContestSubmitIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `contest_submit_id` = ? limit 1", contestSubmitInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, contestSubmitId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestSubmitInfoModel) FindOneByContestIdSubmitId(ctx context.Context, contestId int64, submitId int64) (*ContestSubmitInfo, error) {
	contestSubmitInfoContestIdSubmitIdKey := fmt.Sprintf("%s%v:%v", cacheContestSubmitInfoContestIdSubmitIdPrefix, contestId, submitId)
	var resp ContestSubmitInfo
	err := m.QueryRowIndexCtx(ctx, &resp, contestSubmitInfoContestIdSubmitIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `contest_id` = ? and `submit_id` = ? limit 1", contestSubmitInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, contestId, submitId); err != nil {
			return nil, err
		}
		return resp.ContestSubmitId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestSubmitInfoModel) FindOneBySubmitId(ctx context.Context, submitId int64) (*ContestSubmitInfo, error) {
	contestSubmitInfoSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoSubmitIdPrefix, submitId)
	var resp ContestSubmitInfo
	err := m.QueryRowIndexCtx(ctx, &resp, contestSubmitInfoSubmitIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `submit_id` = ? limit 1", contestSubmitInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, submitId); err != nil {
			return nil, err
		}
		return resp.ContestSubmitId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestSubmitInfoModel) Insert(ctx context.Context, data *ContestSubmitInfo) (sql.Result, error) {
	contestSubmitInfoContestIdSubmitIdKey := fmt.Sprintf("%s%v:%v", cacheContestSubmitInfoContestIdSubmitIdPrefix, data.ContestId, data.SubmitId)
	contestSubmitInfoContestSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoContestSubmitIdPrefix, data.ContestSubmitId)
	contestSubmitInfoSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoSubmitIdPrefix, data.SubmitId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, contestSubmitInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ContestId, data.SubmitId)
	}, contestSubmitInfoContestIdSubmitIdKey, contestSubmitInfoContestSubmitIdKey, contestSubmitInfoSubmitIdKey)
	return ret, err
}

func (m *defaultContestSubmitInfoModel) Update(ctx context.Context, newData *ContestSubmitInfo) error {
	data, err := m.FindOne(ctx, newData.ContestSubmitId)
	if err != nil {
		return err
	}

	contestSubmitInfoContestIdSubmitIdKey := fmt.Sprintf("%s%v:%v", cacheContestSubmitInfoContestIdSubmitIdPrefix, data.ContestId, data.SubmitId)
	contestSubmitInfoContestSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoContestSubmitIdPrefix, data.ContestSubmitId)
	contestSubmitInfoSubmitIdKey := fmt.Sprintf("%s%v", cacheContestSubmitInfoSubmitIdPrefix, data.SubmitId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `contest_submit_id` = ?", m.table, contestSubmitInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ContestId, newData.SubmitId, newData.ContestSubmitId)
	}, contestSubmitInfoContestIdSubmitIdKey, contestSubmitInfoContestSubmitIdKey, contestSubmitInfoSubmitIdKey)
	return err
}

func (m *defaultContestSubmitInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheContestSubmitInfoContestSubmitIdPrefix, primary)
}

func (m *defaultContestSubmitInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `contest_submit_id` = ? limit 1", contestSubmitInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultContestSubmitInfoModel) tableName() string {
	return m.table
}
