// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contestRankInfoFieldNames          = builder.RawFieldNames(&ContestRankInfo{})
	contestRankInfoRows                = strings.Join(contestRankInfoFieldNames, ",")
	contestRankInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(contestRankInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	contestRankInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(contestRankInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheContestRankInfoIdPrefix                       = "cache:contestRankInfo:id:"
	cacheContestRankInfoContestIdUserIdProblemIdPrefix = "cache:contestRankInfo:contestId:userId:problemId:"
)

type (
	contestRankInfoModel interface {
		Insert(ctx context.Context, data *ContestRankInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ContestRankInfo, error)
		FindByContestId(ctx context.Context, contestId int64) ([]ContestRankInfo, error)
		FindOneByContestIdUserIdProblemId(ctx context.Context, contestId int64, userId int64, problemId int64) (*ContestRankInfo, error)
		Update(ctx context.Context, data *ContestRankInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultContestRankInfoModel struct {
		sqlc.CachedConn
		table string
	}

	ContestRankInfo struct {
		Id            int64        `db:"id"`              // 竞赛排名信息ID
		ContestId     int64        `db:"contest_id"`      // 竞赛ID
		UserId        int64        `db:"user_id"`         // 用户ID
		ProblemId     int64        `db:"problem_id"`      // 题目ID
		SubmitTimes   int64        `db:"submit_times"`    // 提交次数
		TryTimes      int64        `db:"try_times"`       // 尝试次数
		IsPass        bool         `db:"is_pass"`         // 是否通过
		FirstPassTime sql.NullTime `db:"first_pass_time"` // 首次通过时间
		CreatedAt     time.Time    `db:"created_at"`      // 记录创建时间
		UpdatedAt     time.Time    `db:"updated_at"`      // 记录更新时间
	}
)

func newContestRankInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultContestRankInfoModel {
	return &defaultContestRankInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`contest_rank_info`",
	}
}

func (m *defaultContestRankInfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	contestRankInfoContestIdUserIdProblemIdKey := fmt.Sprintf("%s%v:%v:%v", cacheContestRankInfoContestIdUserIdProblemIdPrefix, data.ContestId, data.UserId, data.ProblemId)
	contestRankInfoIdKey := fmt.Sprintf("%s%v", cacheContestRankInfoIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, contestRankInfoContestIdUserIdProblemIdKey, contestRankInfoIdKey)
	return err
}

func (m *defaultContestRankInfoModel) FindOne(ctx context.Context, id int64) (*ContestRankInfo, error) {
	contestRankInfoIdKey := fmt.Sprintf("%s%v", cacheContestRankInfoIdPrefix, id)
	var resp ContestRankInfo
	err := m.QueryRowCtx(ctx, &resp, contestRankInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contestRankInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestRankInfoModel) FindByContestId(ctx context.Context, contestId int64) ([]ContestRankInfo, error) {
	contestRankInfoContestIdKey := fmt.Sprintf("%s%v", cacheContestInfoContestIdPrefix, contestId)
	var resp []ContestRankInfo
	err := m.QueryRowsNoCacheCtx(ctx, &resp, contestRankInfoContestIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `contest_id` = ? limit 1", contestRankInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, contestId)
	})
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestRankInfoModel) FindOneByContestIdUserIdProblemId(ctx context.Context, contestId int64, userId int64, problemId int64) (*ContestRankInfo, error) {
	contestRankInfoContestIdUserIdProblemIdKey := fmt.Sprintf("%s%v:%v:%v", cacheContestRankInfoContestIdUserIdProblemIdPrefix, contestId, userId, problemId)
	var resp ContestRankInfo
	err := m.QueryRowIndexCtx(ctx, &resp, contestRankInfoContestIdUserIdProblemIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `contest_id` = ? and `user_id` = ? and `problem_id` = ? limit 1", contestRankInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, contestId, userId, problemId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestRankInfoModel) Insert(ctx context.Context, data *ContestRankInfo) (sql.Result, error) {
	contestRankInfoContestIdUserIdProblemIdKey := fmt.Sprintf("%s%v:%v:%v", cacheContestRankInfoContestIdUserIdProblemIdPrefix, data.ContestId, data.UserId, data.ProblemId)
	contestRankInfoIdKey := fmt.Sprintf("%s%v", cacheContestRankInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, contestRankInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ContestId, data.UserId, data.ProblemId, data.SubmitTimes, data.TryTimes, data.IsPass, data.FirstPassTime)
	}, contestRankInfoContestIdUserIdProblemIdKey, contestRankInfoIdKey)
	return ret, err
}

func (m *defaultContestRankInfoModel) Update(ctx context.Context, newData *ContestRankInfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	contestRankInfoContestIdUserIdProblemIdKey := fmt.Sprintf("%s%v:%v:%v", cacheContestRankInfoContestIdUserIdProblemIdPrefix, data.ContestId, data.UserId, data.ProblemId)
	contestRankInfoIdKey := fmt.Sprintf("%s%v", cacheContestRankInfoIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, contestRankInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ContestId, newData.UserId, newData.ProblemId, newData.SubmitTimes, newData.TryTimes, newData.IsPass, newData.FirstPassTime, newData.Id)
	}, contestRankInfoContestIdUserIdProblemIdKey, contestRankInfoIdKey)
	return err
}

func (m *defaultContestRankInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheContestRankInfoIdPrefix, primary)
}

func (m *defaultContestRankInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contestRankInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultContestRankInfoModel) tableName() string {
	return m.table
}
