// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contestInfoFieldNames          = builder.RawFieldNames(&ContestInfo{})
	contestInfoRows                = strings.Join(contestInfoFieldNames, ",")
	contestInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(contestInfoFieldNames, "`contest_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	contestInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(contestInfoFieldNames, "`contest_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheContestInfoContestIdPrefix   = "cache:contestInfo:contestId:"
	cacheContestInfoContestNamePrefix = "cache:contestInfo:contestName:"
)

type (
	contestInfoModel interface {
		Insert(ctx context.Context, data *ContestInfo) (sql.Result, error)
		FindOne(ctx context.Context, contestId int64) (*ContestInfo, error)
		FindOneByContestName(ctx context.Context, contestName string) (*ContestInfo, error)
		Update(ctx context.Context, data *ContestInfo) error
		Delete(ctx context.Context, contestId int64) error
	}

	defaultContestInfoModel struct {
		sqlc.CachedConn
		table string
	}

	ContestInfo struct {
		ContestId   int64     `db:"contest_id"`   // 竞赛ID
		ContestName string    `db:"contest_name"` // 竞赛名称
		Description string    `db:"description"`  // 竞赛描述
		StartTime   time.Time `db:"start_time"`   // 竞赛开始时间
		EndTime     time.Time `db:"end_time"`     // 竞赛结束时间
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
	}
)

func newContestInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultContestInfoModel {
	return &defaultContestInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`contest_info`",
	}
}

func (m *defaultContestInfoModel) Delete(ctx context.Context, contestId int64) error {
	data, err := m.FindOne(ctx, contestId)
	if err != nil {
		return err
	}

	contestInfoContestIdKey := fmt.Sprintf("%s%v", cacheContestInfoContestIdPrefix, contestId)
	contestInfoContestNameKey := fmt.Sprintf("%s%v", cacheContestInfoContestNamePrefix, data.ContestName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `contest_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, contestId)
	}, contestInfoContestIdKey, contestInfoContestNameKey)
	return err
}

func (m *defaultContestInfoModel) FindOne(ctx context.Context, contestId int64) (*ContestInfo, error) {
	contestInfoContestIdKey := fmt.Sprintf("%s%v", cacheContestInfoContestIdPrefix, contestId)
	var resp ContestInfo
	err := m.QueryRowCtx(ctx, &resp, contestInfoContestIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `contest_id` = ? limit 1", contestInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, contestId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestInfoModel) FindOneByContestName(ctx context.Context, contestName string) (*ContestInfo, error) {
	contestInfoContestNameKey := fmt.Sprintf("%s%v", cacheContestInfoContestNamePrefix, contestName)
	var resp ContestInfo
	err := m.QueryRowIndexCtx(ctx, &resp, contestInfoContestNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `contest_name` = ? limit 1", contestInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, contestName); err != nil {
			return nil, err
		}
		return resp.ContestId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContestInfoModel) Insert(ctx context.Context, data *ContestInfo) (sql.Result, error) {
	contestInfoContestIdKey := fmt.Sprintf("%s%v", cacheContestInfoContestIdPrefix, data.ContestId)
	contestInfoContestNameKey := fmt.Sprintf("%s%v", cacheContestInfoContestNamePrefix, data.ContestName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, contestInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ContestName, data.Description, data.StartTime, data.EndTime)
	}, contestInfoContestIdKey, contestInfoContestNameKey)
	return ret, err
}

func (m *defaultContestInfoModel) Update(ctx context.Context, newData *ContestInfo) error {
	data, err := m.FindOne(ctx, newData.ContestId)
	if err != nil {
		return err
	}

	contestInfoContestIdKey := fmt.Sprintf("%s%v", cacheContestInfoContestIdPrefix, data.ContestId)
	contestInfoContestNameKey := fmt.Sprintf("%s%v", cacheContestInfoContestNamePrefix, data.ContestName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `contest_id` = ?", m.table, contestInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ContestName, newData.Description, newData.StartTime, newData.EndTime, newData.ContestId)
	}, contestInfoContestIdKey, contestInfoContestNameKey)
	return err
}

func (m *defaultContestInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheContestInfoContestIdPrefix, primary)
}

func (m *defaultContestInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `contest_id` = ? limit 1", contestInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultContestInfoModel) tableName() string {
	return m.table
}
