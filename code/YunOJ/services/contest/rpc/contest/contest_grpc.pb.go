// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: contest.proto

package contest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContestService_CreateContest_FullMethodName        = "/contest.ContestService/CreateContest"
	ContestService_UpdateContest_FullMethodName        = "/contest.ContestService/UpdateContest"
	ContestService_GetContestListByPage_FullMethodName = "/contest.ContestService/GetContestListByPage"
	ContestService_GetContestById_FullMethodName       = "/contest.ContestService/GetContestById"
	ContestService_SignUpContest_FullMethodName        = "/contest.ContestService/SignUpContest"
	ContestService_GetSignUpContests_FullMethodName    = "/contest.ContestService/GetSignUpContests"
	ContestService_SubmitAnswer_FullMethodName         = "/contest.ContestService/SubmitAnswer"
	ContestService_GetContestRank_FullMethodName       = "/contest.ContestService/GetContestRank"
	ContestService_AddProblemToContest_FullMethodName  = "/contest.ContestService/AddProblemToContest"
	ContestService_GetContestProblems_FullMethodName   = "/contest.ContestService/GetContestProblems"
)

// ContestServiceClient is the client API for ContestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContestServiceClient interface {
	CreateContest(ctx context.Context, in *CreateContestRequest, opts ...grpc.CallOption) (*CreateContestResponse, error)
	UpdateContest(ctx context.Context, in *UpdateContestRequest, opts ...grpc.CallOption) (*UpdateContestResponse, error)
	GetContestListByPage(ctx context.Context, in *GetContestListByPageRequest, opts ...grpc.CallOption) (*GetContestListByPageResponse, error)
	GetContestById(ctx context.Context, in *GetContestByIdRequest, opts ...grpc.CallOption) (*GetContestByIdResponse, error)
	SignUpContest(ctx context.Context, in *SignUpContestRequest, opts ...grpc.CallOption) (*SignUpContestResponse, error)
	GetSignUpContests(ctx context.Context, in *GetSignUpContestsRequest, opts ...grpc.CallOption) (*GetSignUpContestsResponse, error)
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	GetContestRank(ctx context.Context, in *GetContestRankRequest, opts ...grpc.CallOption) (*GetContestRankResponse, error)
	AddProblemToContest(ctx context.Context, in *AddProblemToContestRequest, opts ...grpc.CallOption) (*AddProblemToContestResponse, error)
	GetContestProblems(ctx context.Context, in *GetContestProblemsRequest, opts ...grpc.CallOption) (*GetContestProblemsResponse, error)
}

type contestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContestServiceClient(cc grpc.ClientConnInterface) ContestServiceClient {
	return &contestServiceClient{cc}
}

func (c *contestServiceClient) CreateContest(ctx context.Context, in *CreateContestRequest, opts ...grpc.CallOption) (*CreateContestResponse, error) {
	out := new(CreateContestResponse)
	err := c.cc.Invoke(ctx, ContestService_CreateContest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) UpdateContest(ctx context.Context, in *UpdateContestRequest, opts ...grpc.CallOption) (*UpdateContestResponse, error) {
	out := new(UpdateContestResponse)
	err := c.cc.Invoke(ctx, ContestService_UpdateContest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) GetContestListByPage(ctx context.Context, in *GetContestListByPageRequest, opts ...grpc.CallOption) (*GetContestListByPageResponse, error) {
	out := new(GetContestListByPageResponse)
	err := c.cc.Invoke(ctx, ContestService_GetContestListByPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) GetContestById(ctx context.Context, in *GetContestByIdRequest, opts ...grpc.CallOption) (*GetContestByIdResponse, error) {
	out := new(GetContestByIdResponse)
	err := c.cc.Invoke(ctx, ContestService_GetContestById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) SignUpContest(ctx context.Context, in *SignUpContestRequest, opts ...grpc.CallOption) (*SignUpContestResponse, error) {
	out := new(SignUpContestResponse)
	err := c.cc.Invoke(ctx, ContestService_SignUpContest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) GetSignUpContests(ctx context.Context, in *GetSignUpContestsRequest, opts ...grpc.CallOption) (*GetSignUpContestsResponse, error) {
	out := new(GetSignUpContestsResponse)
	err := c.cc.Invoke(ctx, ContestService_GetSignUpContests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, ContestService_SubmitAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) GetContestRank(ctx context.Context, in *GetContestRankRequest, opts ...grpc.CallOption) (*GetContestRankResponse, error) {
	out := new(GetContestRankResponse)
	err := c.cc.Invoke(ctx, ContestService_GetContestRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) AddProblemToContest(ctx context.Context, in *AddProblemToContestRequest, opts ...grpc.CallOption) (*AddProblemToContestResponse, error) {
	out := new(AddProblemToContestResponse)
	err := c.cc.Invoke(ctx, ContestService_AddProblemToContest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestServiceClient) GetContestProblems(ctx context.Context, in *GetContestProblemsRequest, opts ...grpc.CallOption) (*GetContestProblemsResponse, error) {
	out := new(GetContestProblemsResponse)
	err := c.cc.Invoke(ctx, ContestService_GetContestProblems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContestServiceServer is the server API for ContestService service.
// All implementations must embed UnimplementedContestServiceServer
// for forward compatibility
type ContestServiceServer interface {
	CreateContest(context.Context, *CreateContestRequest) (*CreateContestResponse, error)
	UpdateContest(context.Context, *UpdateContestRequest) (*UpdateContestResponse, error)
	GetContestListByPage(context.Context, *GetContestListByPageRequest) (*GetContestListByPageResponse, error)
	GetContestById(context.Context, *GetContestByIdRequest) (*GetContestByIdResponse, error)
	SignUpContest(context.Context, *SignUpContestRequest) (*SignUpContestResponse, error)
	GetSignUpContests(context.Context, *GetSignUpContestsRequest) (*GetSignUpContestsResponse, error)
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	GetContestRank(context.Context, *GetContestRankRequest) (*GetContestRankResponse, error)
	AddProblemToContest(context.Context, *AddProblemToContestRequest) (*AddProblemToContestResponse, error)
	GetContestProblems(context.Context, *GetContestProblemsRequest) (*GetContestProblemsResponse, error)
	mustEmbedUnimplementedContestServiceServer()
}

// UnimplementedContestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContestServiceServer struct {
}

func (UnimplementedContestServiceServer) CreateContest(context.Context, *CreateContestRequest) (*CreateContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContest not implemented")
}
func (UnimplementedContestServiceServer) UpdateContest(context.Context, *UpdateContestRequest) (*UpdateContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContest not implemented")
}
func (UnimplementedContestServiceServer) GetContestListByPage(context.Context, *GetContestListByPageRequest) (*GetContestListByPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestListByPage not implemented")
}
func (UnimplementedContestServiceServer) GetContestById(context.Context, *GetContestByIdRequest) (*GetContestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestById not implemented")
}
func (UnimplementedContestServiceServer) SignUpContest(context.Context, *SignUpContestRequest) (*SignUpContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpContest not implemented")
}
func (UnimplementedContestServiceServer) GetSignUpContests(context.Context, *GetSignUpContestsRequest) (*GetSignUpContestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignUpContests not implemented")
}
func (UnimplementedContestServiceServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedContestServiceServer) GetContestRank(context.Context, *GetContestRankRequest) (*GetContestRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestRank not implemented")
}
func (UnimplementedContestServiceServer) AddProblemToContest(context.Context, *AddProblemToContestRequest) (*AddProblemToContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProblemToContest not implemented")
}
func (UnimplementedContestServiceServer) GetContestProblems(context.Context, *GetContestProblemsRequest) (*GetContestProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestProblems not implemented")
}
func (UnimplementedContestServiceServer) mustEmbedUnimplementedContestServiceServer() {}

// UnsafeContestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContestServiceServer will
// result in compilation errors.
type UnsafeContestServiceServer interface {
	mustEmbedUnimplementedContestServiceServer()
}

func RegisterContestServiceServer(s grpc.ServiceRegistrar, srv ContestServiceServer) {
	s.RegisterService(&ContestService_ServiceDesc, srv)
}

func _ContestService_CreateContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).CreateContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_CreateContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).CreateContest(ctx, req.(*CreateContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_UpdateContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).UpdateContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_UpdateContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).UpdateContest(ctx, req.(*UpdateContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_GetContestListByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestListByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).GetContestListByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_GetContestListByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).GetContestListByPage(ctx, req.(*GetContestListByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_GetContestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).GetContestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_GetContestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).GetContestById(ctx, req.(*GetContestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_SignUpContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).SignUpContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_SignUpContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).SignUpContest(ctx, req.(*SignUpContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_GetSignUpContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignUpContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).GetSignUpContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_GetSignUpContests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).GetSignUpContests(ctx, req.(*GetSignUpContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_GetContestRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).GetContestRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_GetContestRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).GetContestRank(ctx, req.(*GetContestRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_AddProblemToContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProblemToContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).AddProblemToContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_AddProblemToContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).AddProblemToContest(ctx, req.(*AddProblemToContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestService_GetContestProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestServiceServer).GetContestProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContestService_GetContestProblems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestServiceServer).GetContestProblems(ctx, req.(*GetContestProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContestService_ServiceDesc is the grpc.ServiceDesc for ContestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contest.ContestService",
	HandlerType: (*ContestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContest",
			Handler:    _ContestService_CreateContest_Handler,
		},
		{
			MethodName: "UpdateContest",
			Handler:    _ContestService_UpdateContest_Handler,
		},
		{
			MethodName: "GetContestListByPage",
			Handler:    _ContestService_GetContestListByPage_Handler,
		},
		{
			MethodName: "GetContestById",
			Handler:    _ContestService_GetContestById_Handler,
		},
		{
			MethodName: "SignUpContest",
			Handler:    _ContestService_SignUpContest_Handler,
		},
		{
			MethodName: "GetSignUpContests",
			Handler:    _ContestService_GetSignUpContests_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _ContestService_SubmitAnswer_Handler,
		},
		{
			MethodName: "GetContestRank",
			Handler:    _ContestService_GetContestRank_Handler,
		},
		{
			MethodName: "AddProblemToContest",
			Handler:    _ContestService_AddProblemToContest_Handler,
		},
		{
			MethodName: "GetContestProblems",
			Handler:    _ContestService_GetContestProblems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contest.proto",
}
