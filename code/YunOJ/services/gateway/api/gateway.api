syntax = "v1"

info (
	title:   "type title here"
	desc:    "type desc here"
	author:  "type author here"
	email:   "type email here"
	version: "type version here"
)

type BaseResponse {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type (
	User {
		UserId   int64  `json:"userId"`
		Username string `json:"username"`
		Email    string `json:"email"`
		Phone    string `json:"phone"`
		UserType int64  `json:"userType"`
		Avatar   string `json:"avatar"`
		Status   int64  `json:"status"`
	}
	LoginRequest {
		UserKey  string `json:"userKey"`
		Password string `json:"password"`
	}
	LoginResponse {
		BaseResponse
		Data   User   `json:"data"`
		Utoken string `json:"utoken"`
	}
	RegisterRequest {
		Username string `json:"username"`
		Phone    string `json:"phone"`
		Password string `json:"password"`
	}
	RegisterResponse {
		BaseResponse
		Data bool `json:"data"`
	}
)

@server (
	group:  user
	prefix: /v1/user
)
service Gateway {
	@handler Login
	post /login (LoginRequest) returns (LoginResponse)

	@handler Register
	post /register (RegisterRequest) returns (RegisterResponse)
}

type (
	Problem {
		ProblemId   int64  `json:"problemId"`
		Title       string `json:"title"`
		TimeLimit   int64  `json:"timeLimit"`
		MemoryLimit int64  `json:"memoryLimit"`
		Description string `json:"description"`
		HardLevel   int64  `json:"hardLevel"`
		SubmitCount int64  `json:"submitCount"`
		PassCount   int64  `json:"passCount"`
	}
	Submit {
		SubmitId  int64  `json:"submitId"`
		UserId    int64  `json:"userId"`
		ProblemId int64  `json:"problemId"`
		Code      string `json:"code"`
		Status    int64  `json:"status"`
		Language  int64  `json:"language"`
		Result    int64  `json:"result"`
		Time      int64  `json:"time"`
		Memory    int64  `json:"memory"`
	}
	GetProblemByIdRequest {
		ProblemId int64 `json:"problemId"`
	}
	GetProblemByIdResponse {
		BaseResponse
		Data Problem `json:"data"`
	}
	GetProblemsByPageRequest {
		PageNo   int64 `json:"pageNo"`
		PageSize int64 `json:"pageSize"`
	}
	GetProblemsByPageResponse {
		BaseResponse
		Data  []Problem `json:"data"`
		Total int64     `json:"total"`
	}
	CreateProblemRequest {
		Title       string `json:"title"`
		TimeLimit   int64  `json:"timeLimit"`
		MemoryLimit int64  `json:"memoryLimit"`
		Description string `json:"description"`
		HardLevel   int64  `json:"hardLevel"`
	}
	CreateProblemResponse {
		BaseResponse
		Data int64 `json:"data"`
	}
	UpdateProblemRequest {
		ProblemId   int64  `json:"problemId"`
		Title       string `json:"title"`
		TimeLimit   int64  `json:"timeLimit"`
		MemoryLimit int64  `json:"memoryLimit"`
		Description string `json:"description"`
		HardLevel   int64  `json:"hardLevel"`
	}
	UpdateProblemResponse {
		BaseResponse
		Data bool `json:"data"`
	}
	DeleteProblemRequest {
		ProblemId int64 `json:"problemId"`
	}
	DeleteProblemResponse {
		BaseResponse
		Data bool `json:"data"`
	}
	SubmitRequest {
		ProblemId int64  `json:"problemId"`
		Code      string `json:"code"`
		Language  int64  `json:"language"`
	}
	SubmitResponse {
		BaseResponse
		Data int64 `json:"data"`
	}
	GetSubmitByIdRequest {
		SubmitId int64 `json:"submitId"`
	}
	GetSubmitByIdResponse {
		BaseResponse
		Data Submit `json:"data"`
	}
	GetSubmissionByProblemIdRequest {
		ProblemId int64 `json:"problemId"`
	}
	GetSubmissionByProblemIdResponse {
		BaseResponse
		Data []Submit `json:"data"`
	}
)

@server (
	group:      problem
	prefix:     /v1/problem
	middleware: AuthInterceptor
)
service Gateway {
	@handler GetProblemById
	post /get (GetProblemByIdRequest) returns (GetProblemByIdResponse)

	@handler GetProblemsByPage
	post /getByPage (GetProblemsByPageRequest) returns (GetProblemsByPageResponse)

	@handler CreateProblem
	post /create (CreateProblemRequest) returns (CreateProblemResponse)

	@handler UpdateProblem
	post /update (UpdateProblemRequest) returns (UpdateProblemResponse)

	@handler DeleteProblem
	post /delete (DeleteProblemRequest) returns (DeleteProblemResponse)

	@handler Submit
	post /submit (SubmitRequest) returns (SubmitResponse)

	@handler getSubmitById
	post /getSubmit (GetSubmitByIdRequest) returns (GetSubmitByIdResponse)

	@handler GetSubmissionByUserIdAndProblemId
	post /getSubmissionByProblemId (GetSubmissionByProblemIdRequest) returns (GetSubmissionByProblemIdResponse)
}

type (
	JudgeCase {
		Input  string `json:"input"`
		Output string `json:"output"`
	}
	SetJudgeCaseRequest {
		ProblemId int64       `json:"problemId"`
		Cases     []JudgeCase `json:"cases"`
	}
	SetJudgeCaseResponse {
		BaseResponse
	}
	OnlineJudgeRequest {
		Code     string `json:"code"`
		Language int64  `json:"language"`
		Input    string `json:"input"`
	}
	OnlineJudgeResponse {
		BaseResponse
		Data string `json:"data"`
	}
)

@server (
	group:      judge
	prefix:     /v1/judge
	middleware: AuthInterceptor
)
service Gateway {
	@handler SetJudgeCase
	post /setJudgeCase (SetJudgeCaseRequest) returns (SetJudgeCaseResponse)

	@handler OnlineJudge
	post /onlineJudge (OnlineJudgeRequest) returns (OnlineJudgeResponse)
}

type (
	Contest {
		Id          int64  `json:"id"`
		Name        string `json:"name"`
		Description string `json:"description"`
		StartTime   int64  `json:"startTime"`
		EndTime     int64  `json:"endTime"`
	}
	ContestProblemInfo {
		ProblemId int64  `json:"problemId"`
		Title     string `json:"title"`
	}
	ContestRankInfo {
		UserId        int64 `json:"userId"`
		ProblemId     int64 `json:"problemId"`
		TryTimes      int64 `json:"tryTimes"`
		SubmitTimes   int64 `json:"submitTimes"`
		FirstPassTime int64 `json:"firstPassTime"`
	}
	CreateContestRequest {
		Contest Contest `json:"contest"`
	}
	CreateContestResponse {
		BaseResponse
		Data bool `json:"data"`
	}
	UpdateContestRequest {
		Contest Contest `json:"contest"`
	}
	UpdateContestResponse {
		BaseResponse
		Data bool `json:"data"`
	}
	GetContestByPageRequest {
		PageNo   int64 `json:"pageNo"`
		PageSize int64 `json:"pageSize"`
	}
	GetContestByPageResponse {
		BaseResponse
		Total int64     `json:"total"`
		Data  []Contest `json:"data"`
	}
	AddProblemRequest {
		ContestId  int64   `json:"contestId"`
		ProblemIds []int64 `json:"problemIds"`
	}
	AddProblemResponse {
		BaseResponse
		Data bool `json:"data"`
	}
	GetContestProblemsRequest {
		ContestId int64 `json:"contestId"`
	}
	GetContestProblemsResponse {
		BaseResponse
		Data []ContestProblemInfo `json:"data"`
	}
	SignUpContestRequest {
		ContestId int64 `json:"contestId"`
	}
	SignUpContestResponse {
		BaseResponse
		Data bool `json:"data"`
	}
	SubmitAnswerRequest {
		ContestId int64  `json:"contestId"`
		ProblemId int64  `json:"problemId"`
		Code      string `json:"code"`
		Language  int64  `json:"language"`
	}
	SubmitAnswerResponse {
		BaseResponse
		Data int64 `json:"data"`
	}
	GetContestRankRequest {
		ContestId int64 `json:"contestId"`
	}
	GetContestRankResponse {
		BaseResponse
		Data []ContestRankInfo `json:"data"`
	}
)

@server (
	group:      contest
	prefix:     /v1/contest
	middleware: AuthInterceptor
)
service Gateway {
	@handler CreateContest
	post /createContest (CreateContestRequest) returns (CreateContestResponse)

	@handler UpdateContest
	post /updateContest (UpdateContestRequest) returns (UpdateContestResponse)

	@handler GetContestByPage
	post /getContestByPage (GetContestByPageRequest) returns (GetContestByPageResponse)

	@handler AddProblem
	post /addProblem (AddProblemRequest) returns (AddProblemResponse)

	@handler GetContestProblems
	post /getContestProblems (GetContestProblemsRequest) returns (GetContestProblemsResponse)

	@handler SignUpContest
	post /signUpContest (SignUpContestRequest) returns (SignUpContestResponse)

	@handler SubmitAnswer
	post /submitAnswer (SubmitAnswerRequest) returns (SubmitAnswerResponse)

	@handler GetContestRank
	post /getContestRank (GetContestRankRequest) returns (GetContestRankResponse)
}

